{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","util/Spotify.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","handleTermChange","bind","handleSearch","event","this","setState","target","value","onSearch","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","handleSave","onNameChange","onSave","Spotify","accessToken","getAccessToken","acessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expirationTime","setTimeout","history","pushState","search","fetch","method","headers","Authorization","response","json","items","artists","uri","console","log","message","savePlaylist","playlistName","trackUris","userId","playlistId","user","body","JSON","stringify","playlist","uris","App","playlistTracks","updatePlaylistName","then","newTrack","find","savedTrack","push","filter","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.88b5b1cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term: \"\",\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({term: event.target.value});\r\n  }\r\n\r\n  handleSearch() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"SearchBar\">\r\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n        <button onClick={this.handleSearch} className=\"SearchButton\">\r\n          SEARCH\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  renderAction() {\r\n    if(this.props.isRemoval) {\r\n      return <button className=\"Track-action remove\" onClick={this.removeTrack}>-</button>\r\n    } else {\r\n      return <button className=\"Track-action add\" onClick={this.addTrack}>+</button>\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\n\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className=\"TrackList\">\r\n        {\r\n          this.props.tracks.map((track) => {\r\n            return <Track \r\n                      key={track.id} \r\n                      track={track} \r\n                      onAdd={this.props.onAdd}\r\n                      onRemove={this.props.onRemove}\r\n                      isRemoval={this.props.isRemoval}\r\n                    />\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\n\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className=\"SearchResults\">\r\n        <h2 className=\"SearchResults-title\">Results</h2>\r\n        <TrackList \r\n          tracks={this.props.searchResults}\r\n          onAdd={this.props.onAdd}\r\n          isRemoval={false}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\n\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handleSave = this.handleSave.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  handleSave() {\r\n    this.props.onSave();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"Playlist\">\r\n        <input onChange={this.handleNameChange} placeholder=\"New Playlist\"/>\r\n        <TrackList \r\n          tracks={this.props.tracks}\r\n          onRemove={this.props.onRemove}\r\n          isRemoval={true}\r\n        />\r\n        <button onClick={this.handleSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Playlist;","const clientId      = \"e9dbde275cbf4de3964c6f674e6d59f3\",\r\n      redirectUri   = \"http://localhost:3000\",\r\n      baseApiUrl    = \"https://api.spotify.com/v1\";\r\n\r\nconst Spotify = {\r\n  accessToken: \"\",\r\n  \r\n  getAccessToken() {  \r\n    if(this.acessToken) {\r\n      return this.acessToken;\r\n    };\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if(accessTokenMatch && expiresInMatch) {\r\n      this.acessToken =  accessTokenMatch[1];\r\n      const expirationTime =  expiresInMatch[1];\r\n\r\n      window.setTimeout(() => this.acessToken = '', expirationTime * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return this.acessToken;\r\n\r\n    } else {\r\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=token`;\r\n    };\r\n  },\r\n\r\n  async search(term) {\r\n    try {\r\n      let response = await fetch(`${baseApiUrl}/search?type=track&q=${term}`, \r\n        { \r\n          method: 'GET',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            Authorization: 'Bearer ' + this.getAccessToken(),\r\n          }\r\n        }\r\n      );\r\n      \r\n      response = await response.json();\r\n\r\n      return response.tracks.items.map((track) => {\r\n        return {\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        };\r\n      });   \r\n    } catch (error) {\r\n      console.log(error.message);\r\n      return [];\r\n    };\r\n  },\r\n\r\n  async savePlaylist(playlistName, trackUris) {\r\n    \r\n    if(!playlistName || !trackUris) {\r\n      return;\r\n    }\r\n\r\n    let accessToken = this.getAccessToken();\r\n    let headers = {\r\n      Authorization: 'Bearer ' + accessToken\r\n    };\r\n    let userId = '';\r\n    let playlistId = '';\r\n\r\n    let user = await fetch(`https://api.spotify.com/v1/me`, {\r\n      headers: headers\r\n    });\r\n    user = await user.json();\r\n    userId = user.id\r\n\r\n    let playlist = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n      headers: headers,\r\n      method: 'POST',\r\n      body: JSON.stringify({name:  playlistName})\r\n    });\r\n    playlist = await playlist.json();\r\n    playlistId = playlist.id;\r\n\r\n    await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n      headers: headers,\r\n      method: 'POST',\r\n      body: JSON.stringify({uris: trackUris})\r\n    });\r\n  }\r\n};\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\n\r\nimport Spotify from '../../util/Spotify';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: \"\",\r\n      playlistTracks: [],\r\n    };\r\n\r\n    this.search = this.search.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term)\r\n    .then((searchResults) => {\r\n      this.setState({searchResults: searchResults});\r\n    }); \r\n  }\r\n\r\n  updatePlaylistName(playlistName) {\r\n    this.setState({playlistName: playlistName});\r\n  }\r\n\r\n  addTrack(newTrack) {\r\n    const playlistTracks = this.state.playlistTracks;\r\n    if(playlistTracks.find(savedTrack => savedTrack.id === newTrack.id)) {\r\n      return;\r\n    };\r\n    playlistTracks.push(newTrack);\r\n    this.setState({ playlistTracks: playlistTracks });\r\n  }\r\n\r\n  removeTrack(savedTrack) {\r\n    const playlistTracks = this.state.playlistTracks.filter(\r\n      track => track.id !== savedTrack.id\r\n    );\r\n    this.setState({playlistTracks: playlistTracks});\r\n  }\r\n\r\n  savePlaylist() {\r\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n    Spotify.savePlaylist(this.state.playlistName, trackUris)\r\n    .then(() => {\r\n      this.setState({ \r\n        playlistName: \"New Playlist\",\r\n        playlistTracks: [],\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"App\">\r\n      <h1 className=\"App-title\">Spotlist</h1>\r\n        <SearchBar \r\n          onSearch={this.search}\r\n        />\r\n        <div className=\"App-playlist\">\r\n          <SearchResults\r\n            searchResults={this.state.searchResults}\r\n            onAdd={this.addTrack}\r\n          />\r\n          <Playlist \r\n            playlistName={this.state.playlistName} \r\n            tracks={this.state.playlistTracks}\r\n            onNameChange={this.updatePlaylistName} \r\n            onRemove={this.removeTrack}\r\n            onSave={this.savePlaylist}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}